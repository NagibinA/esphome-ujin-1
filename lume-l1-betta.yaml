# Основные спецификаторы форматирования (printf-стиль)
# Спецификатор Тип данных Пример использования
# %d или %i int (знаковое целое) sprintf(buf, "Value: %d", -42);
# %u unsigned int (беззнаковое) sprintf(buf, "Value: %u", 42);
# %ld long int (знаковое) sprintf(buf, "Value: %ld", -100000L);
# %lu unsigned long int sprintf(buf, "Value: %lu", 100000UL);
# %lld long long int (знаковое) sprintf(buf, "Value: %lld", -5000000000LL);
# %llu unsigned long long int sprintf(buf, "Value: %llu", 5000000000ULL);
# %f float / double sprintf(buf, "Temp: %.2f", 23.5f);
# %e, %E Число в экспоненциальной форме sprintf(buf, "Sci: %e", 0.000045); → 4.500000e-05
# %x, %X Шестнадцатеричный (unsigned) sprintf(buf, "Hex: 0x%X", 255); → 0xFF
# %o Восьмеричный (unsigned) sprintf(buf, "Oct: %o", 64); → 100
# %c Символ (char) sprintf(buf, "Char: %c", 'A');
# %s Строка (const char*) sprintf(buf, "Name: %s", "ESP32");
# %% Символ % sprintf(buf, "Battery: 50%%");


# EN – RST (XS2)
# GPIO0 – GPO (XS2)
# GPIO1 –  TXD (XS2)
# GPIO2 – touch sensor 2
# GPIO3 – внешний вход для выключателя 2, RXD (XS2)
# GPIO4 – infrared receiver
# GPIO5 – переход через ноль
# GPIO6 – CLK PSRAM
# GPIO7 – I2C SDA
# GPIO8 – I2C SCL
# GPIO9 – SD PSRAM
# GPIO10 – SD PSRAM
# GPIO11 – CMD PSRAM
# GPIO12 – __________
# GPIO13 – infrared transmitter
# GPIO14 – ZIGBEE 2652 (DIO16) rx_pin
# GPIO15 – touch sensor 1
# GPIO19 – управление лампой 1
# GPIO20 – I2S ws_pin
# GPIO21 – I2S bck_pin
# GPIO22 – I2S din_pin
# GPIO25 – управление лампой 2
# GPIO26 – адресные светодиоды WS2812 (5 штук)
# GPIO27 – ZIGBEE 2652 (DIO17) tx_pin
# GPIO32 – buzzer
# GPIO33 – внешний вход для выключателя 1
# GPI34 – __________  
# GPI35 – датчик движения PIR612
# GPI36 – __________  
# GPI37 – __________  
# GPI38 – __________  
# GPI39 – __________  

# Датчик температуры и влажности – адрес I2C 0x44
# Датчик освещенности – адрес I2C 0x23
# Цифровой потенциометр – адрес I2C 0x2f


# https://stuvel.eu/post/2022-06-05-esphome-touch-dimmer/
substitutions:
  name: lume
  device_description: Супер выключатель

esphome:
  name: "${name}"
  comment: "${device_description}"
  platformio_options:
    board_upload.maximum_size: 7864320

      
  includes:
    - included/touch-dimming.h 
  on_boot:
    - priority: 500
      then:
        - lambda: new TouchDimmer("dimm1", light_dimmer1, left_touch);
        - lambda: new TouchDimmer("dimm2", light_dimmer2, right_touch);                

api:
  reboot_timeout: 0s     
  
esp32:
  board: denky_d4
  flash_size: 8MB
  framework:
    type: arduino
    
#-------------------------------------------
# PSRAM
#-------------------------------------------
psram:
  mode: quad
  speed: 80MHz

#-------------------------------------------
# MCP453X
#-------------------------------------------
mcp453x:
  id: my_mcp453x
  address: 0x2F

#-------------------------------------------
# I2c
#-------------------------------------------
i2c:
  sda:
    number: GPIO7
    ignore_pin_validation_error: true
  scl: 
    number: GPIO8
    ignore_pin_validation_error: true
  scan: true
  id: bus_a

#-------------------------------------------
# PACKAGES
#-------------------------------------------
packages:
  wifi: !include packages/wifi.yaml
  web: !include included/web.yaml
  device_base: !include packages/device_base.yaml
 # time: !include included/time.yaml
  esp32_temp: !include packages/sensor/esp32_temp.yaml

#-------------------------------------------
# LOGGER
#-------------------------------------------
logger:

wifi:
  id: wifi_id
#-------------------------------------------
# SCRIPT
#-------------------------------------------
script:
  - id: action_noise
    mode: single
    then:
      - lambda: |-
          uint8_t t_noise =  id(g_noise);
          switch(t_noise) {
            case 0: ; break;
            case 1: id(light_dimmer1).turn_on().set_brightness(1.0).perform(); break;
            case 2: id(light_dimmer1).turn_off().perform(); break;
            case 3: id(light_dimmer1).toggle(); break;
            case 4: id(light_dimmer2).turn_on().set_brightness(1.0).perform(); break;
            case 5: id(light_dimmer2).turn_off(); break;
            case 6: id(light_dimmer2).toggle(); break;
            case 7: 
              id(light_dimmer1).turn_on().set_brightness(1.0).perform();
              id(light_dimmer2).turn_on().set_brightness(1.0).perform();
              break;
            case 8: 
              id(light_dimmer1).turn_off();
              id(light_dimmer2).turn_off();
              break;
            case 9: 
              id(light_dimmer1).toggle().perform();
              id(light_dimmer2).toggle().perform(); 
              break;
            case 10: 
              id(light_dimmer1).turn_on().set_brightness(0.5).perform(); 
              delay (60000);
              id(light_dimmer1).turn_off(); 
              break;
            case 11: 
              id(light_dimmer2).turn_on().set_brightness(0.5).perform(); 
              delay (60000);
              id(light_dimmer2).turn_off(); 
              break;
            case 12:
              id(light_dimmer1).turn_on().set_brightness(0.5).perform();
              id(light_dimmer2).turn_on().set_brightness(0.5).perform(); 
              delay (60000);
              id(light_dimmer1).turn_off();
              id(light_dimmer2).turn_off(); 
              break;       
          }
  - id: action_motion
    mode: single
    then:
      - lambda: |-
          auto t_pir = id(g_pir);
          switch(t_pir) {
            case 0: ; break;
            case 1: id(light_dimmer1).turn_on().set_brightness(1.0).perform(); break;
            case 2: id(light_dimmer1).turn_off(); break;
            case 3: id(light_dimmer1).toggle(); break;
            case 4: id(light_dimmer2).turn_on().set_brightness(1.0).perform(); break;
            case 5: id(light_dimmer2).turn_off(); break;
            case 6: id(light_dimmer2).toggle(); break;
            case 7: 
              id(light_dimmer1).turn_on().set_brightness(1.0).perform();
              id(light_dimmer2).turn_on().set_brightness(1.0).perform();
              break;
            case 8: 
              id(light_dimmer1).turn_off();
              id(light_dimmer2).turn_off();
              break;
            case 9: 
              id(light_dimmer1).toggle();
              id(light_dimmer2).toggle(); 
              break;
            case 10: 
              id(light_dimmer1).turn_on().set_brightness(0.5).perform(); 
              delay (60000);
              id(light_dimmer1).turn_off(); 
              break;
            case 11: 
              id(light_dimmer2).turn_on().set_brightness(0.5).perform(); 
              delay (60000);
              id(light_dimmer2).turn_off(); 
              break;
            case 12:
              id(light_dimmer1).turn_on().set_brightness(0.5).perform();
              id(light_dimmer2).turn_on().set_brightness(0.5).perform(); 
              delay (60000);
              id(light_dimmer1).turn_off();
              id(light_dimmer2).turn_off(); 
              break;       
          }
#-------------------------------------------
# OUTPUT
#-------------------------------------------      
output:
  - platform: ac_dimmer
    gate_pin: GPIO19  
    id: dimmer1
    zero_cross_pin:
      number: GPIO5
      mode:
        input: true
      inverted: yes
      ignore_strapping_warning: true
      allow_other_uses: true
    min_power: 30%
    init_with_half_cycle: true

  - platform: ac_dimmer
    id: dimmer2
    gate_pin: GPIO25
    zero_cross_pin:
      number: GPIO5
      mode:
        input: true
      inverted: yes
      ignore_strapping_warning: true
      allow_other_uses: true
    min_power: 30%
    init_with_half_cycle: true

  - platform: ledc
    pin: GPIO32
    id: rtttl_out

# Create the MCP453X output
  - platform: mcp453x
    id: pir_output
    mcp453x_id: my_mcp453x

#-------------------------------------------
# LIGHT
#-------------------------------------------
light:
  - platform: monochromatic   # binary  если не нужно диммировать
    output: dimmer1
    name: "${name} 1 лампа"
    id: light_dimmer1
    restore_mode: ALWAYS_OFF
    icon: mdi:numeric-1-circle-outline

  - platform: monochromatic   # binary  если не нужно диммировать    
    output: dimmer2
    name: "${name} 2 лампа"
    id: light_dimmer2
    restore_mode: ALWAYS_OFF
    icon: mdi:numeric-2-circle-outline

  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO26
    num_leds: 5
    rmt_channel: 2
    chipset: WS2812
    id: led_ww
#    name: "Светодиоды на диммере"

#-------------------------------------------
# TOUCH
#-------------------------------------------
esp32_touch:
  setup_mode: False

#-------------------------------------------
# BINARY SENSOR
#-------------------------------------------
binary_sensor:
  - platform: analog_threshold
    name: "${name} движение"
    id: pir
    threshold: 0.5
    sensor_id: pir_adc
    device_class: motion
    icon: mdi:motion-sensor
    on_press: 
      then:
        - script.execute: action_motion
        - script.stop: action_motion
  - platform: analog_threshold
    name: "Датчик шума"
    id: noise
    threshold: 60
    sensor_id: Leq_id
    device_class: sound
    icon: mdi:speaker-wireless
    on_press: 
      then:
        - script.execute: action_noise
        - script.stop: action_noise
  - platform: esp32_touch
    name: "${name} левая кнопка"
    id: left_touch
    pin: GPIO15
    icon: mdi:gesture-tap-button
    threshold: 1150
    on_click: 
      then:
        - if:
            condition:
              switch.is_on: sound
            then:
              - rtttl.play: 'short:d=20,o=5,b=100:e6'  

  - platform: esp32_touch
    name: "${name} правая кнопка"
    id: right_touch
    pin: GPIO2
    icon: mdi:gesture-tap-button
    threshold: 1150
    on_click: 
      then:
        - if:
            condition:
              switch.is_on: sound
            then:
              - rtttl.play: 'short:d=20,o=5,b=100:e6'  

  - platform: gpio
    pin:
      number: GPIO33
      inverted: true
    id: "input1"
    name: "${name} Вход 1"
    on_press:
      then:
        - lambda: |-
            int8_t act_in1 = id(g_in1);
            switch(act_in1) {
              case 0: ; break;
              case 1: id(light_dimmer1).turn_on().set_brightness(1.0).perform(); break;
              case 2 ... 4: id(light_dimmer1).toggle(); break;

            }
    on_release: 
      then:
        - lambda: |-
            int8_t act_in1 = id(g_in1);
            switch(act_in1) {
              case 0: ; break;
              case 1: id(light_dimmer1).turn_off(); break;
              case 2 ... 43: id(light_dimmer1).toggle(); break;
            }

    icon: mdi:inbox-arrow-down-outline

  - platform: gpio
    pin:
      number: GPIO3
      inverted: true
    id: "input2"
    name: "${name} Вход 2"       
    icon: mdi:inbox-arrow-down-outline
    on_press:
      then:
        - lambda: |-
            int8_t act_in2 = id(g_in2);
            switch(act_in2) {
              case 0: ; break;
              case 1: id(light_dimmer2).turn_on().set_brightness(1.0).perform(); break;
              case 2 ... 4: id(light_dimmer2).toggle(); break;

            }
    on_release: 
      then:
        - lambda: |-
            int8_t act_in2 = id(g_in2);
            switch(act_in2) {
              case 0: ; break;
              case 1: id(light_dimmer2).turn_off(); break;
              case 2 ... 43: id(light_dimmer2).toggle(); break;
            }
#-------------------------------------------
# SENSOR
#-------------------------------------------
sensor:
  - platform: adc
    pin: GPIO35
    id: pir_adc    
#    name: "pir_adc_gpio35"
    update_interval: 1s

  - platform: sht3xd
    temperature:
      name: "${name} температура"
      icon: mdi:thermometer
    humidity:
      name: "${name} влажность"
      icon: mdi:water-percent
    address: 0x44
    update_interval: 60s

  - platform: bh1750
    name: "${name} освещенность"
    address: 0x23
    update_interval: 5s
    icon: mdi:brightness-5
  - platform: uptime
    name: "${name} uptime"
    
  - platform: stream_server
    connection_count:
      name: "${name} number of connections"
      icon: mdi:connection
#-------------------------------------------
# RTTTL
#-------------------------------------------
rtttl:
  output: rtttl_out
  gain: 60%

#-------------------------------------------
# REMOTE_TRANSMITTER
#-------------------------------------------
remote_transmitter:
  pin: GPIO13
  # Infrared remotes use a 50% carrier signal
  carrier_duty_percent: 50%

text_sensor:
  - platform: template
    name: "IR code"
    id: ir_code
    icon: mdi:remote-tv
#-------------------------------------------
# REMOTE_RECEIVER
#-------------------------------------------
remote_receiver:
  pin:
    number: GPIO4
    inverted: true 
  id: r_receiver
  on_abbwelcome:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства abb-welcome: Код %u", x.data()[0]);'
      - logger.log:
          format: "abbwelcome: %u"
          args: ["x.data()[0]"]
  on_aeha:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства aeha: Команда %u Адрес %u", x.data.front(), x.address);'      
      - logger.log:
          format: "on_aeha: %u %u"
          args: ["x.address", "x.data.front()"]
  on_byronsx:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства byronsx: Команда %u Адрес %u", x.command, x.address);'  
      - logger.log:
          format: "on_byronsx: %u %u"
          args: ["x.address", "x.command"]
  on_canalsat:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства canalsat: Команда %u Адрес %u", x.command, x.address);' 
      - logger.log:
          format: "on_canalsat: %u %u"
          args: ["x.address", "x.command"]
 # on_canalsatld:
 #   then:
  #    - text_sensor.template.publish:
  #        id: ir_code
   #       state: !lambda 'return str_sprintf("Получено от устройства canalsatld: Команда %u Адрес %u", x.command, x.address);' 
    #  - logger.log:
  #        format: "on_canalsatld: %u %u"
    #      args: ["x.address", "x.command"]     
  on_coolix:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства coolix: Первый код %lu Второй код %lu", long(x.first), long(x.second));' 
      - logger.log:
          format: "on_coolix: %lu %lu"
          args: ["long(x.first)", "long(x.second)"]
  on_dish:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства dish: Команда %u Адрес %u", x.command, x.address);' 
      - logger.log:
          format: "on_dish: %u %u"
          args: ["x.address", "x.command"]
  on_dooya:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства dooya: Канал %u Кнопка %u Проверка %u", x.channel, x.button, x.check);' 
      - logger.log:
          format: "on_dooya: %u %u %u"
          args: ["x.channel", "x.button", "x.check"]
  on_drayton:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства drayton: Команда %u Адрес %u Канал %u", x.command, x.address, x.channel);' 
      - logger.log:
          format: "on_drayton: %u %u %u"
          args: ["x.address", "x.channel", "x.command"]
  on_jvc:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства jvc: Код %lu", long(x.data));' 
      - logger.log:
          format: "on_jvc: %lu"
          args: ["long(x.data)"]
  on_keeloq:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства keeloq: Команда %u Адрес %lu Код %lu", x.command, long(x.address), long(x.encrypted));' 
      - logger.log:
          format: "on_keeloq: %lu %lu %u"
          args: ["long(x.encrypted)", "long(x.address)", "x.command"]
  on_haier:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства haier: Код %u", x.data.front());' 
      - logger.log:
          format: "on_haier: %u"
          args: ["x.data.front()"]
  on_lg:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства lg: Биты %u  Код %lu", x.nbits , long(x.data));'
      - logger.log:
          format: "on_lg: %lu %u"
          args: ["long(x.data)", "x.nbits"]
  on_magiquest:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства magiquest: Величина %u  Идентификатор %lu", x.magnitude , long(x.wand_id));'
      - logger.log:
          format: "on_magiquest: %u %lu"
          args: ["x.magnitude", "long(x.wand_id)"]
  on_midea:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства midea: Размер %u  Команда %u", x.size() , x.data()[0]);'
      - logger.log:
          format: "on_midea: %u %u"
          args: ["x.size()", "x.data()[0]"]
  on_nec:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства nec: Команда %u Адрес %u", x.command, x.address);' 
      - logger.log:
          format: "on_nec: %u %u"
          args: ["x.address", "x.command"]
  on_nexa:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства nexa: Устройство %lu Группа %u Состояние %u Канал %u Уровень %u", long(x.device), x.group, x.state, x.channel, x.level);' 
      - logger.log:
          format: "on_nexa: %lu %u %u %u %u"
          args: ["long(x.device)", "x.group", "x.state", "x.channel", "x.level"]
  on_panasonic:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства panasonic: Команда %lu Адрес %u", long(x.command), x.address);' 
      - logger.log:
          format: "on_panasonic: %u %lu"
          args: ["x.address", "long(x.command)"]
  on_pioneer:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства pioneer: Первый код %u Второй код %u", x.rc_code_1, x.rc_code_2);' 
      - logger.log:
          format: "on_pioneer: %u %u"
          args: ["x.rc_code_1", "x.rc_code_2"]
  on_rc5:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства rc5: Команда %u Адрес %u", x.command, x.address);' 
      - logger.log:
          format: "on_rc5: %u %u"
          args: ["x.address", "x.command"]
  on_rc6:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства rc6: Команда %u Адрес %u", x.command, x.address);' 
      - logger.log:
          format: "on_rc6: %u %u"
          args: ["x.address", "x.command"]
  on_rc_switch:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства rc_switch: Команда %llu Протокол %u", x.code, x.protocol);' 
      - logger.log:
          format: "on_rc_switch: %llu %u"
          args: ["x.code", "x.protocol"]
  on_samsung:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства samsung: Бит %u Команда %llu", x.nbits, x.data);'
      - logger.log:
          format: "on_samsung: %llu %u"
          args: ["x.data", "x.nbits"]
  on_samsung36:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства samsung36: Адрес %u Команда %lu", x.address, long(x.command));'
      - logger.log:
          format: "on_samsung36: %u %lu"
          args: ["x.address", "long(x.command)"]
  on_sony:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства sony: Бит %u Команда %lu", x.nbits, long(x.data));'
      - logger.log:
          format: "on_sony: %lu %u"
          args: ["long(x.data)", "x.nbits"]
  on_toshiba_ac:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства toshiba_ac: Первый код %llu Второй код %llu", x.rc_code_1, x.rc_code_2);' 
      - logger.log:
          format: "on_toshiba_ac: %llu %llu"
          args: ["x.rc_code_1", "x.rc_code_2"]
  on_mirage:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства mirage: Код %s", format_hex(x.data).c_str());' 
      - lambda: |-
          ESP_LOGD("mirage", "Mirage data: %s", format_hex(x.data).c_str());
  on_toto:
    then:
      - text_sensor.template.publish:
          id: ir_code
          state: !lambda 'return str_sprintf("Получено от устройства toto: Первый код %u Второй код %u Команда %u", x.rc_code_1, x.rc_code_2, x.command);' 
      - logger.log:
          format: "on_toto: %u %u %u"
          args: ["x.rc_code_1", "x.rc_code_2", "x.command"]
 # on_roomba:
 #   then:
 #     - text_sensor.template.publish:
  #        id: ir_code
  #        state: !lambda 'return str_sprintf("Получено от устройства roomba: Команда %u", x.command);' 
   #   - logger.log:
    #      format: "on_toto: %u"
     #     args: ["x.command"]



#-------------------------------------------
# EXTERNAL COMPONENTS
#-------------------------------------------
external_components:
  - source: github://stas-sl/esphome-sound-level-meter
    refresh: 0s
  - source: github://oxan/esphome-stream-server@master
    refresh: 0s
  - source: github://ananyevgv/esphome-components/
    refresh: 0s

#-------------------------------------------
# I2S
#-------------------------------------------
i2s:
  bck_pin: 21
  ws_pin: 20
  din_pin: 22
  sample_rate: 48000            # default: 48000
  bits_per_sample: 32           # default: 32
  bits_shift: 8                 # default: 0

#-------------------------------------------
# SOUND LEVEL METER
#-------------------------------------------
sound_level_meter:
  update_interval: 1s           # default: 60s
  buffer_size: 1024             # default: 1024
  mic_sensitivity: -26dB        # default: empty
  mic_sensitivity_ref: 94dB     # default: empty
  groups:
    - sensors:
        - type: eq
          name: "${name} Leq_1s"
          id: Leq_id
#-------------------------------------------
# UART
#-------------------------------------------
uart:
  id: uart_zigbee
  rx_pin:
    number: 14
    mode:
      input: true
      output: false
      open_drain: false
      pullup: false
      pulldown: false
    inverted: false
    ignore_strapping_warning: false
    drive_strength: 20.0
  tx_pin:
    number: 27
    mode:
      output: true
      input: false
      open_drain: false
      pullup: false
      pulldown: false
    inverted: false
    ignore_strapping_warning: false
    drive_strength: 20.0
  baud_rate: 115200
  rx_buffer_size: 256
  stop_bits: 1
  data_bits: 8
  parity: NONE
#-------------------------------------------
# STREAM SERVER
#-------------------------------------------
stream_server:
  uart_id: uart_zigbee
  port: 6638
  buffer_size: 128

select:
  - platform: template
    name: "Чувствительность датчика движения"
    entity_category: config
    icon: mdi:motion-sensor
    options:
     - "Очень высокая"      
     - "Высокая"
     - "Средняя"
     - "Низкая"
     - "Очень низкая"     
    initial_option: "Очень высокая"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            switch(i) {
              case 0: id(pir_output).set_level(0); break;
              case 1: id(pir_output).set_level(0.25); break;
              case 2: id(pir_output).set_level(0.50); break;
              case 3: id(pir_output).set_level(0.75); break;
              case 4: id(pir_output).set_level(1.0); break;
            }
  - platform: template
    name: "Чувствительность датчика звука"
    entity_category: config
    options:
     - "Очень высокая"      
     - "Высокая"
     - "Средняя"
     - "Низкая"
     - "Очень низкая"     
    initial_option: "Очень высокая"
    optimistic: true
    icon: mdi:microphone-message
    on_value:
      then:
        - lambda: |-
            switch(i) {
              case 0:
                 id(noise).set_lower_threshold(60.0); 
                 id(noise).set_upper_threshold(60.0); 
                 break;
              case 1: 
                id(noise).set_lower_threshold(70.0);
                id(noise).set_upper_threshold(70.0); 
                break;
              case 2: 
                id(noise).set_lower_threshold(80.0);
                id(noise).set_upper_threshold(80.0); 
                break;
              case 3: 
                id(noise).set_lower_threshold(90.0);
                 id(noise).set_upper_threshold(90.0);
                 break;
              case 4: 
                id(noise).set_lower_threshold(100.0);
                id(noise).set_upper_threshold(100.0); 
                break;
            }

  - platform: template
    name: "Бренд ИК"
    entity_category: config
    id: ir_mode
    icon: mdi:remote-tv
    options:
     - "all"
     - "abbwelcome"
     - "aeha"
     - "byronsx"
     - "canalsat"
     - "canalsatld"
     - "coolix"
     - "dish"
     - "dooya"
     - "drayton"
     - "jvc"
     - "keeloq"
     - "haier"
     - "lg"
     - "magiquest"
     - "midea"
     - "nec"
     - "nexa"
     - "panasonic"
     - "pioneer"
     - "pronto"
     - "raw"
     - "rc5"
     - "rc6"
     - "roomba"
     - "Samsung"
     - "samsung36"
     - "sony"
     - "toshiba_ac"
     - "mirage"
     - "toto"
    initial_option: "all"
    optimistic: true
  #  on_value:
   #   then:
   #     - lambda: |-
    #        id(r_receiver).call_dumpers_(char(id(ir_mode).state.c_str()));
  

  - platform: template
    name: "Цвет индикации press"
    entity_category: config
    icon: mdi:palette
    options:
      - "Выкл"              # (0, 0, 0) 0
      - "Белый"             # (255, 255, 255)1
      - "Красный"           # (255, 0, 0)2
      - "Синий"             # (0, 0, 255)3
      - "Морская волна"     # (0, 255, 255)4
      - "Фуксин"            # (255, 0, 255) 5
      - "Серый"             # (128, 128, 128)6
      - "Зеленый"           # (0, 128, 0)7
      - "Ярко-зеленый"      # (0, 255, 0)8
      - "Темно-бордовый"    # (128, 0, 0)9
      - "Темно-синий"       # (0, 0, 128) 10
      - "Оливковый"         # (128, 128, 0)11
      - "Фиолетовый"        # (128, 0, 128)12
      - "Серо-зеленый"      # (80, 100, 80)13
      - "Желтый"            # (255, 255, 0)14
    initial_option: "Красный"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            switch(i) {
              case 0: id(color_press) = Color(0, 0, 0); break;
              case 1: id(color_press) = Color(255, 255, 255); break;
              case 2: id(color_press) = Color(255, 0, 0); break;
              case 3: id(color_press) = Color(0, 0, 255); break;
              case 4: id(color_press) = Color(0, 255, 255); break;
              case 5: id(color_press) = Color(255, 0, 255); break;
              case 6: id(color_press) = Color(128, 128, 128); break;
              case 7: id(color_press) = Color(0, 128, 0); break;
              case 8: id(color_press) = Color(0, 255, 0); break;
              case 9: id(color_press) = Color(128, 0, 0); break;
              case 10: id(color_press) = Color(0, 0, 128); break;
              case 11: id(color_press) = Color(128, 128, 0); break;
              case 12: id(color_press) = Color(128, 0, 128); break;
              case 13: id(color_press) = Color(80, 100, 80); break;
              case 14: id(color_press) = Color(255, 255, 0); break;          
            }

  - platform: template
    name: "Цвет индикации on"
    entity_category: config
    icon: mdi:palette
    options:
      - "Выкл"              # (0, 0, 0) 0
      - "Белый"             # (255, 255, 255)1
      - "Красный"           # (255, 0, 0)2
      - "Синий"             # (0, 0, 255)3
      - "Морская волна"     # (0, 255, 255)4
      - "Фуксин"            # (255, 0, 255) 5
      - "Серый"             # (128, 128, 128)6
      - "Зеленый"           # (0, 128, 0)7
      - "Ярко-зеленый"      # (0, 255, 0)8
      - "Темно-бордовый"    # (128, 0, 0)9
      - "Темно-синий"       # (0, 0, 128) 10
      - "Оливковый"         # (128, 128, 0)11
      - "Фиолетовый"        # (128, 0, 128)12
      - "Серо-зеленый"      # (80, 100, 80)13
      - "Желтый"            # (255, 255, 0)14
    initial_option: "Синий"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            switch(i) {
              case 0: id(color_on) = Color(0, 0, 0); break;
              case 1: id(color_on) = Color(255, 255, 255); break;
              case 2: id(color_on) = Color(255, 0, 0); break;
              case 3: id(color_on) = Color(0, 0, 255); break;
              case 4: id(color_on) = Color(0, 255, 255); break;
              case 5: id(color_on) = Color(255, 0, 255); break;
              case 6: id(color_on) = Color(128, 128, 128); break;
              case 7: id(color_on) = Color(0, 128, 0); break;
              case 8: id(color_on) = Color(0, 255, 0); break;
              case 9: id(color_on) = Color(128, 0, 0); break;
              case 10: id(color_on) = Color(0, 0, 128); break;
              case 11: id(color_on) = Color(128, 128, 0); break;
              case 12: id(color_on) = Color(128, 0, 128); break;
              case 13: id(color_on) = Color(80, 100, 80); break;
              case 14: id(color_on) = Color(255, 255, 0); break;  
            }

  - platform: template
    name: "Цвет индикации off"
    entity_category: config
    icon: mdi:palette
    options:
      - "Выкл"              # (0, 0, 0) 0
      - "Белый"             # (255, 255, 255)1
      - "Красный"           # (255, 0, 0)2
      - "Синий"             # (0, 0, 255)3
      - "Морская волна"     # (0, 255, 255)4
      - "Фуксин"            # (255, 0, 255) 5
      - "Серый"             # (128, 128, 128)6
      - "Зеленый"           # (0, 128, 0)7
      - "Ярко-зеленый"      # (0, 255, 0)8
      - "Темно-бордовый"    # (128, 0, 0)9
      - "Темно-синий"       # (0, 0, 128) 10
      - "Оливковый"         # (128, 128, 0)11
      - "Фиолетовый"        # (128, 0, 128)12
      - "Серо-зеленый"      # (80, 100, 80)13
      - "Желтый"            # (255, 255, 0)14
    initial_option: "Зеленый"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            switch(i) {
              case 0: id(color_off) = Color(0, 0, 0); break;
              case 1: id(color_off) = Color(255, 255, 255); break;
              case 2: id(color_off) = Color(255, 0, 0); break;
              case 3: id(color_off) = Color(0, 0, 255); break;
              case 4: id(color_off) = Color(0, 255, 255); break;
              case 5: id(color_off) = Color(255, 0, 255); break;
              case 6: id(color_off) = Color(128, 128, 128); break;
              case 7: id(color_off) = Color(0, 128, 0); break;
              case 8: id(color_off) = Color(0, 255, 0); break;
              case 9: id(color_off) = Color(128, 0, 0); break;
              case 10: id(color_off) = Color(0, 0, 128); break;
              case 11: id(color_off) = Color(128, 128, 0); break;
              case 12: id(color_off) = Color(128, 0, 128); break;
              case 13: id(color_off) = Color(80, 100, 80); break;
              case 14: id(color_off) = Color(255, 255, 0); break;          
            }

  - platform: template
    name: "Чувствительность кнопок"
    id: sensitivity_of_touch_id
    entity_category: config
    icon: mdi:gesture-tap-hold
    options:
      - "Низкая"              
      - "Средняя"             
      - "Высокая"          
    initial_option: "Высокая"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            switch(i) {
              case 0: 
                id(right_touch).set_threshold (1300); 
                id(left_touch).set_threshold (1300); 
                break;
              case 1:  
                id(right_touch).set_threshold (1150); 
                id(left_touch).set_threshold (1150); 
                break;
              case 2:  
                id(right_touch).set_threshold (1000); 
                id(left_touch).set_threshold (1000); 
                break;
            }

  - platform: template
    name: "Тип внешнего выключателя 1"
    entity_category: config
    id: type_external_1
    icon: mdi:dip-switch
    options:
      - "Не использовать"              
      - "Стандартный"             
      - "Проходной"
      - "Без фиксации замыкающий"             
      - "Без фиксации размыкающий"                
    initial_option: "Не использовать"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(g_in1) = (i);
        - logger.log:
            format: "IN2 option: %s (%d)"
            args: ["x.c_str()", "i"]
  - platform: template
    name: "Тип внешнего выключателя 2"
    entity_category: config
    id: type_external_2
    icon: mdi:dip-switch
    options:
      - "Не использовать"              
      - "Стандартный"             
      - "Проходной"
      - "Без фиксации замыкающий"             
      - "Без фиксации размыкающий"                
    initial_option: "Не использовать"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(g_in2) = (i);
        - logger.log:
            format: "IN2 option: %s (%d)"
            args: ["x.c_str()", "i"]

  - platform: template
    name: "Тип выключателя"
    entity_category: config
    id: type_switch_id
    options:
      - "Двойной"              
      - "Одиночный"                            
    initial_option: "Двойной"
    optimistic: true


  - platform: template
    name: "Каналы диммирования"
    id: dimming_channels_id
    entity_category: config
    options:
      - "Диммировать 2 канала"              
      - "Диммировать только 1 канал"  
      - "Диммировать только 2 канал"
      - "Диммирование каналов отключено"                                        
    initial_option: "Диммировать 2 канала"
    optimistic: true
   

  - platform: template
    name: "Действия датчика шума"
    id: triggered_noise
    entity_category: config
    icon: mdi:account-reactivate-outline
    options:
      - "Нет действия"              
      - "Включить 1 канал"  
      - "Выключить 1 канал"
      - "Переключить 1 канал" 
      - "Включить 2 канал"  
      - "Выключить 2 канал"
      - "Переключить 2 канал"  
      - "Включить оба канала"  
      - "Выключить оба канала"
      - "Переключить оба канала"  
      - "Включить 1 канал на время"  
      - "Включить 2 канал на время"  
      - "Включить оба канала на время"                                      
    initial_option: "Нет действия"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(g_noise) = (i);
        - logger.log:
            format: "Noise option: %s (%d)"
            args: ["x.c_str()", "i"]

  - platform: template
    name: "Действия датчика движения"
    id: triggered_pir
    entity_category: config
    icon: mdi:account-reactivate-outline
    options:
      - "Нет действия"              
      - "Включить 1 канал"  
      - "Выключить 1 канал"
      - "Переключить 1 канал" 
      - "Включить 2 канал"  
      - "Выключить 2 канал"
      - "Переключить 2 канал"  
      - "Включить оба канала"  
      - "Выключить оба канала"
      - "Переключить оба канала"  
      - "Включить 1 канал на время"  
      - "Включить 2 канал на время"  
      - "Включить оба канала на время"                    
    initial_option: "Нет действия"
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(g_pir) = (i);
        - logger.log:
            format: "Pir option: %s (%d)"
            args: ["x.c_str()", "i"]
globals:
  - id: color_press
    type: Color 
    restore_value: no
    initial_value: 'Color(255, 255, 0)'

  - id: color_on
    type: Color 
    restore_value: no
    initial_value: 'Color(0, 0, 255)'

  - id: color_off
    type: Color 
    restore_value: no
    initial_value: 'Color(0, 255, 255)'

  - id: g_noise
    type: int
    restore_value: no
    initial_value: '0'

  - id: g_pir
    type: int
    restore_value: no
    initial_value: '0'

  - id: g_in1
    type: int
    restore_value: no
    initial_value: '0'

  - id: g_in2
    type: int
    restore_value: no
    initial_value: '0'
number:
  - platform: template
    name: "${name} Яркость"
    icon: mdi:brightness-5
    id: brid
    min_value: 30
    max_value: 100
    step: 10
    optimistic: true
    initial_value: 100
    mode: slider
    entity_category: config
    on_value:
      then:
        - lambda: |-
            id(lume_display)->get_light()->set_correction(x/100, x/100, x/100);

switch:
  - platform: template
    name: "Звук нажатие клавиш"
    optimistic: True
    id: sound
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:volume-off

  - platform: template
    name: "Подсведка кнопок"
    icon: mdi:light-switch-off
    optimistic: True
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - lambda: |-
          id(lume_display).set_enabled(true);
    on_turn_off:
      - lambda: |-
          id(lume_display).set_enabled(false);


display:
  - platform: addressable_light
    id: lume_display
    addressable_light_id: led_ww
    width: 1
    height: 5
    update_interval: 0.1s
    lambda: |-
      Color black = Color(0x000000);
      if (id(left_touch).state)
          it.rectangle(0, 3, 0, 3, id(color_press));
      else {
        if (id(light_dimmer1).remote_values.is_on())
          it.rectangle(0, 3, 0, 3, id(color_on));
        else
          it.rectangle(0, 3, 0, 3, id(color_off));
      }

      if (id(right_touch).state)
          it.rectangle(0, 4, 0, 4, id(color_press));
      else {
        if (id(light_dimmer2).remote_values.is_on())
          it.rectangle(0, 4, 0, 4, id(color_on));
        else
          it.rectangle(0, 4, 0, 4, id(color_off));
      }
      if (id(wifi_id).is_connected())
        it.rectangle(0, 0, 0, 3, black);
      else {
        static int i = 0;
        i++;
        if ((i % 10) == 0) 
          it.rectangle(0, 0, 0, 3, id(color_off));
      }

