substitutions:
  espname: "leak-sensor"

esphome:
  name: $espname
  friendly_name: leak_sensor

  on_boot:
    - priority: 600
      then:
        - lambda: |-
            id(rf24_status_code_).publish_state(0);           
        - lambda: |-
            id(rf24_status_code2_).publish_state(0);

esp32:
  board: esp32-c3-devkitm-1
  flash_size: 4MB  
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "AmxedEJhAfMcKE6bQRZs/btPH5ulaj2Fi4nQElgAb8Y="

ota:
  - platform: esphome
    password: "d1a95728705a37f617f8906658978cbc"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Leak-Sensor Fallback Hotspot"
    password: "AUCm5MdF9ZHh"

captive_portal:

mqtt:
  broker: "192.168.1.11"
  port: 1883
  username: !secret mqtt_login
  password: !secret mqtt_password

esp32_ble_tracker:
  scan_parameters:
    active: false
    duration: 32s
    interval: 320ms
    window: 310ms     

  on_ble_advertise:
    - mac_address: '01:00:5E:00:1D:88'
      then:    
    - mac_address: '01:00:5E:00:38:C8'
      then:

  on_ble_manufacturer_data_advertise:
    - mac_address: '01:00:5E:00:1D:88'
      manufacturer_id: 'ffff'
      then:
        - lambda: |-        
            struct __attribute__((packed)) dataStruct {
            int16_t  initial_two_bytes;
            uint8_t battery_level;
            uint8_t status_code;
            uint8_t counter;
            } myData;            
            memcpy(&myData, &*x.begin(), sizeof(myData)); 
            id(rf24_battery_level_).publish_state(myData.battery_level);
            id(rf24_status_code_).publish_state(myData.status_code);

    - mac_address: '01:00:5E:00:38:C8'
      manufacturer_id: 'ffff'
      then:
        - lambda: |-        
            struct __attribute__((packed)) dataStruct {
            int16_t  initial_two_bytes;
            uint8_t battery_level;
            uint8_t status_code;
            uint8_t counter;
            } myData2;            
            memcpy(&myData2, &*x.begin(), sizeof(myData2)); 
            id(rf24_battery_level2_).publish_state(myData2.battery_level);
            id(rf24_status_code2_).publish_state(myData2.status_code);

sensor:

  - platform: template
    name: "leak_battery_level"
    id: rf24_battery_level_
    unit_of_measurement: '%'
    accuracy_decimals: 0
    device_class: battery
    state_topic: "$espname/leak_battery_level/level"

  - platform: template
    name: "leak_status_code"
    id: rf24_status_code_
    accuracy_decimals: 0

  - platform: template
    name: "leak_battery_level2"
    id: rf24_battery_level2_
    unit_of_measurement: '%'
    accuracy_decimals: 0
    device_class: battery
    state_topic: "$espname/leak_battery_level2/level"


  - platform: template
    name: "leak_status_code2"
    id: rf24_status_code2_
    accuracy_decimals: 0

  - platform: uptime
    name: "Uptime"
    
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s


binary_sensor:
  - platform: template
    name: "very long press"
    id: very_long_press_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 6) & 0x01;

  - platform: template
    name: "very long press2"
    id: very_long_press2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 6) & 0x01;

  - platform: template
    name: "long press"
    id: long_press_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 5) & 0x01;

  - platform: template
    name: "long press2"
    id: long_press2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 5) & 0x01;

  - platform: template
    name: "input"
    id: input_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 2) & 0x01;

  - platform: template
    name: "input2"
    id: input2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 2) & 0x01;

  - platform: template
    name: "leak"
    id: leak_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 1) & 0x01;

  - platform: template
    name: "leak2"
    id: leak2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 1) & 0x01;

  - platform: template
    name: "press button"
    id: press_button_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 0) & 0x01;

  - platform: template
    name: "press button2"
    id: press_button2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 0) & 0x01;

  - platform: template
    name: "Протечка"
    id: leak
    lambda: return (id(rf24_status_code_).state == 2 || id(rf24_status_code_).state == 4 || id(rf24_status_code_).state == 6);
    device_class: MOISTURE
    state_topic: "$espname/leak/status"

  - platform: template
    name: "Протечка2"
    id: leak2
    lambda: return (id(rf24_status_code2_).state == 2 || id(rf24_status_code2_).state == 4 || id(rf24_status_code2_).state == 6);
    device_class: MOISTURE    
    state_topic: "$espname/leak2/status"    